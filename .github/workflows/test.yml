# SPDX-FileCopyrightText: Copyright (c) The helly25 authors (helly25.com)
# SPDX-License-Identifier: Apache-2.0
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Reusable Test Runner

on:
  workflow_call:
    inputs:
      continue-on-error:
        description: 'Whether to continue on error (e.g. prevent parallel matrix operations to stop).'
        type: boolean
        default: false
      os:
        description: 'The operating system the tests will be run on.'
        type: string
        default: ubuntu-latest
      bazel_mode:
        description: 'The Bazel operation mode (bzlmod, workspace).'
        type: string
        default: bzlmod
      compiler:
        description: 'The compiler to use (clang, gcc).'
        type: string
        default: clang
      llvm_version:
        description: 'The LLVM version to use. This is only for compiler=clang and will be ignored otherwise.'
        type: string
        default: ''
      gcc_version:
        description: 'The GCC version to use. This is only for compiler=gcc and will be ignored otherwise (e.g. 11, 12, 13).'
        type: string
        default: ''
      bazel_config:
        description: 'The way how Bazel should operate compilation and tests, one of (asan, fastbuild, opt).'
        type: string
        default: opt
      module_version:
        description: 'Version string for the "MODULE.${module_version}.bazel" to be copied from the bzlmod directory.'
        type: string
        default: ''
      module_default:
        description: 'If the "module_version" has this value, then no "MODULE.${module_version}.bazel" will be copied.'
        type: string
        default: ''

env:
  CACHE_KEY_PREFIX: ${{inputs.os}}-${{inputs.bazel_mode}}_${{inputs.compiler}}_${{inputs.compiler == 'clang' && inputs.llvm_version || ''}}_${{inputs.compiler == 'gcc' && inputs.gcc_version || ''}}_${{inputs.bazel_config}}_${{inputs.module_version}}

jobs:
  test:
    runs-on: ${{inputs.os}}
    continue-on-error: ${{inputs.continue-on-error}}
    steps:
      - uses: actions/checkout@v4
      - uses: bazelbuild/setup-bazelisk@v3
      - uses: egor-tensin/setup-gcc@v1
        if: ${{inputs.compiler == 'gcc' && inputs.gcc_version != ''}}
        with:
          version: ${{inputs.gcc_version}}
          platform: ${{runner.arch}}

      - uses: actions/cache/restore@v4
        id: cache_restore
        with:
            path: "~/.cache/bazel"
            key: ${{env.CACHE_KEY_PREFIX}}-${{github.ref}}-${{github.sha}}
            restore-keys: |
              ${{env.CACHE_KEY_PREFIX}}-${{github.ref}}
              ${{env.CACHE_KEY_PREFIX}}-refs/heads/main
              ${{env.CACHE_KEY_PREFIX}}

      - name: Build and Test
        run: |
          if [ "${{inputs.compiler}}:${{inputs.gcc_version}}" == "gcc:" ]; then
            echo "ERROR: When compiler=='gcc', then a valid 'compiler_version' must be given."
            exit 1
          fi
          declare -a BAZEL_INIT=()
          declare -a BAZEL_ARGS=()
          CACHE_ROOT=~/.cache
          BAZEL_INIT+=("--output_user_root=${CACHE_ROOT}/bazel")
          BAZEL_ARGS+=("--repository_cache=${CACHE_ROOT}/bazel_repo-cache")
          if [ "${{inputs.bazel_mode}}" == "workspace" ]; then
            BAZEL_ARGS+=("--noenable_bzlmod" "--enable_workspace")
          elif [ "${{inputs.bazel_mode}}" == "bzlmod" ]; then
            BAZEL_ARGS+=("--enable_bzlmod" "--noenable_workspace")
          else
            echo "ERROR: Matrix/Input var 'bazel_mode' must be one of [bzlmod, workspace]."
            exit 1
          fi
          if [ "${{inputs.compiler}}" == "clang" ]; then
            BAZEL_ARGS+=("--config=clang")
            unset CC
            unset CXX
            if [ -r "bazelmod/llvm.${{inputs.llvm_version}}.MODULE.bazel" ]; then
              cp "bazelmod/llvm.${{inputs.llvm_version}}.MODULE.bazel" bazelmod/llvm.MODULE.bazel
            elif [ -n "${{inputs.llvm_version}}" ]; then
              CONTROL_FILE=bazelmod/llvm.MODULE.bazel
              sed -e 's,llvm_version = ".*",llvm_version = "${{inputs.llvm_version}}",g' "${CONTROL_FILE}" > "${CONTROL_FILE}.new"
              mv "${CONTROL_FILE}.new" "${CONTROL_FILE}"
            fi
          elif [ "${{inputs.compiler}}" == "gcc" ]; then
            export CC=/usr/local/bin/gcc
            export CXX=/usr/local/bin/g++
          elif [ "${{inputs.compiler}}" == "native" ]; then
            # Use whatever is found! Not setting environment (done below). Here we only show.
            if [ -n "${CC}" ] && [ -x "${which gcc}" ]; then
              export CC="${which gcc}"
            fi
            if [ -n "${CXX}" ] && [ -x "${which g++}" ]; then
              export CC="${which g++}"
            fi
          else
            echo "ERROR: Matrix/Input var 'compiler' must be one of [clang, gcc, native]."
          fi
          if [ "${{inputs.bazel_config}}" == "asan" ]; then
            BAZEL_ARGS+=("-c" "dbg" "--config=asan")
          elif [ "${{inputs.bazel_config}}" == "cpp23" ]; then
            BAZEL_ARGS+=("-c" "opt" "--config=cpp23")
          elif [ "${{inputs.bazel_config}}" == "fastbuild" ]; then
            BAZEL_ARGS+=("-c" "fastbuild")
          elif [ "${{inputs.bazel_config}}" == "opt" ]; then
            BAZEL_ARGS+=("-c" "opt")
          else
            echo "ERROR: Matrix/Input var 'bazel_config' must be one of [asan, cpp23, fastbuild, opt]."
          fi
          if [ -n "${{inputs.module_version}}" ]; then
            if [ "${{inputs.module_version}}" != "${{inputs.module_default}}" ]; then
              cp "bazelmod/MODULE.${{inputs.module_version}}.bazel" MODULE.bazel
            fi
          fi
          [ -n "${CC}" ] && [ -x "${CC}" ] && echo "CC: $(${CC} --version)"
          [ -n "${CXX}" ] && [ -x "${CXX}" ] && echo "CXX: $(${CXX} --version)"
          echo "BAZEL_INIT: ${BAZEL_INIT[@]}"
          echo "BAZEL_ARGS: ${BAZEL_ARGS[@]}"
          bazel "${BAZEL_INIT[@]}" run //tools:show_compiler || echo "Cannot determine compiler version!"
          bazel "${BAZEL_INIT[@]}" test "${BAZEL_ARGS[@]}" //... -k

      - uses: actions/cache/save@v4
        if: ${{!startsWith(github.ref, 'refs/tags/')}}
        id: cache_save
        with:
            path: "~/.cache/bazel"
            key: ${{env.CACHE_KEY_PREFIX}}-${{github.ref}}-${{github.sha}}

      - name: Cleanup old caches
        if: ${{!startsWith(github.ref, 'refs/tags/') && steps.cache_restore.outputs.cache-hit}}
        run: |
          set -euo pipefail
          PREFIX="${{env.CACHE_KEY_PREFIX}}-${{github.ref}}"
          echo "Fetching list of old caches for key prefix '${PREFIX}'..."
          cacheKeyList=$(gh cache list  --limit 250 --json id,key,ref,createdAt --jq "map(select(.key|startswith(\"${PREFIX}\")))|sort_by(.createdAt)|.[:-1]|.[].id")
          echo "Deleting caches..."
          for cacheKey in ${cacheKeyList}; do
            echo "Deleting cache: '${cacheKey}'"
            gh cache delete "${cacheKey}" || echo "Error deleting: '${cacheKey}'."
          done
        env:
          GH_TOKEN: ${{secrets.CACHE_ACCESS}}
          GH_REPO: ${{github.repository}}
